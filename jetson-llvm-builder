# BSD 2-Clause License
# 
# Copyright (c) 2020, Alessandro Capotondi
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#!/bin/bash

#LLVM Version
LLVM_VER=10.0.0

# Jetson Nano
ARCH_BIN=5.3
LLVM_PATH=/usr/local

# Source code directory
LLVM_SRC=$HOME
WHEREAMI=$PWD
# NUM_JOBS is the number of jobs to run simultaneously when using make
# This will default to the number of CPU cores (on the Nano, that's 4)
# If you are using a SD card, you may want to change this
# to 1. Also, you may want to increase the size of your swap file
NUM_JOBS=4

function usage() {
  echo "usage: $0 [[-s sourcedir ] | [-h]]"
  echo "-s | --sourcedir   Directory in which to place the Clang/LLVM sources (default $LLVM_SRC)"
  echo "-i | --installdir  Directory in which to install Clang/LLVM libraries (default $LLVM_PATH)"
  echo "--no_package       Do not package Clang/LLVM as .deb file (default is true)"
  echo "-h | --help  This message"
}

# Iterate through command line inputs
while [ "$1" != "" ]; do
  case $1 in
  -s | --sourcedir)
    shift
    LLVM_SRC=$1
    ;;
  -i | --installdir)
    shift
    LLVM_PATH=$1
    ;;
  --no_package)
    PACKAGE_LLVM=""
    ;;
  -h | --help)
    usage
    exit
    ;;
  *)
    usage
    exit 1
    ;;
  esac
  shift
done

CMAKE_INSTALL_PREFIX=$LLVM_PATH

# Print out the current configuration
echo "Build configuration: "
echo " NVIDIA Jetson Nano"
echo " Clang/LLVM binaries will be installed in: $CMAKE_INSTALL_PREFIX"
echo " Clang/LLVM Source will be installed in: $LLVM_SRC"
if [ "$PACKAGE_LLVM" = "" ]; then
  echo " NOT Packaging Clang/LLVM"
else
  echo " Packaging Clang/LLVM"
fi

# Repository setup
apt-add-repository universe
apt-get update

# Download dependencies for the desired configuration
cd $WHEREAMI
apt-get install -y \
  apt-utils \
  git \
  libffi-dev \
  libelf-dev \
  cmake \
  wget \
  xz-utils \
  zsh

# Build LLVM/Clang with GCC
mkdir -p $LLVM_SRC
if [ -d "$LLVM_SRC/llvm-$LLVM_VER" ]; then
  echo "Found sources at $LLVM_SRC/llvm-$LLVM_VER: skipping download..."
else
  cd $LLVM_SRC
  wget https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VER/llvm-$LLVM_VER.src.tar.xz
  tar -xf llvm-$LLVM_VER.src.tar.xz
  mv llvm-$LLVM_VER.src llvm-$LLVM_VER
  rm -rf llvm-$LLVM_VER.src.tar.xz

  wget https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VER/clang-$LLVM_VER.src.tar.xz
  tar -xf clang-$LLVM_VER.src.tar.xz
  mv clang-$LLVM_VER.src llvm-$LLVM_VER/tools/clang
  rm -rf clang-$LLVM_VER.src.tar.xz

  wget https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VER/openmp-$LLVM_VER.src.tar.xz
  tar -xf openmp-$LLVM_VER.src.tar.xz
  mv openmp-$LLVM_VER.src llvm-$LLVM_VER/projects/openmp
  rm -rf openmp-$LLVM_VER.src.tar.xz

  # We will be supporting CUDA Offloading on AARCH64, we need a little magic to help
  # https://reviews.llvm.org/D76469#change-bNa3STPpyw0M
  cd $LLVM_SRC
  patch -N llvm-$LLVM_VER/projects/openmp/libomptarget/plugins/cuda/CMakeLists.txt $WHEREAMI'/patches/enable-arm-aarch64-cuda-offload.patch'
fi

cd $LLVM_SRC
mkdir -p build-$LLVM_VER
cd build-$LLVM_VER

echo $PWD
time cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
  -D LLVM_TARGETS_TO_BUILD="ARM;AArch64;NVPTX" \
  -D CMAKE_BUILD_TYPE=RELEASE \
  -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
  -D LLVM_ENABLE_ASSERTIONS=ON \
  -D LLVM_ENABLE_BACKTRACES=ON \
  -D LLVM_ENABLE_RTTI=ON \
  -D LLVM_ENABLE_WERROR=OFF \
  -D BUILD_SHARED_LIBS=OFF \
  -D CLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_53 \
  -D LIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=53,62,72 \
  $LLVM_SRC/llvm-$LLVM_VER

if [ $? -eq 0 ]; then
  echo "CMake configuration make successful"
else
  # Try to make again
  echo "CMake issues " >&2
  echo "Please check the configuration being used"
  exit 1
fi

time make -j$NUM_JOBS
if [ $? -eq 0 ]; then
  echo "Clang/LLVM make successful"
else
  # Try to make again; Sometimes there are issues with the build
  # because of lack of resources or concurrency issues
  echo "Make did not build " >&2
  echo "Retrying ... "
  # Single thread this time
  time make
  if [ $? -eq 0 ]; then
    echo "Clang/LLVM make successful"
  else
    # Try to make again
    echo "Make did not successfully build" >&2
    echo "Please fix issues and retry build"
    exit 1
  fi
fi

echo "Installing ... "
make install
if [ $? -eq 0 ]; then
  echo "Clang/LLVM v$LLVM_VER installed in: $CMAKE_INSTALL_PREFIX"
else
  echo "There was an issue with the final installation"
  exit 1
fi

# Bootstrap LLVM/Clang
cd $LLVM_SRC

cd build-$LLVM_VER
echo $PWD
time cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
  -D LLVM_TARGETS_TO_BUILD="ARM;AArch64;NVPTX" \
  -D CMAKE_BUILD_TYPE=RELEASE \
  -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
  -D LLVM_ENABLE_ASSERTIONS=ON \
  -D LLVM_ENABLE_BACKTRACES=ON \
  -D LLVM_ENABLE_RTTI=ON \
  -D LLVM_ENABLE_WERROR=OFF \
  -D BUILD_SHARED_LIBS=OFF \
  -D CLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_53 \
  -D LIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=53,62,72 \
  -D CMAKE_C_COMPILER=${LLVM_PATH}/bin/clang \
  -D CMAKE_CXX_COMPILER=${LLVM_PATH}/bin/clang++ \
  $LLVM_SRC/llvm-$LLVM_VER

if [ $? -eq 0 ]; then
  echo "CMake configuration make successful"
else
  # Try to make again
  echo "CMake issues " >&2
  echo "Please check the configuration being used"
  exit 1
fi

time make -j$NUM_JOBS
if [ $? -eq 0 ]; then
  echo "Clang/LLVM make successful"
else
  # Try to make again; Sometimes there are issues with the build
  # because of lack of resources or concurrency issues
  echo "Make did not build " >&2
  echo "Retrying ... "
  # Single thread this time
  time make
  if [ $? -eq 0 ]; then
    echo "Clang/LLVM make successful"
  else
    # Try to make again
    echo "Make did not successfully build" >&2
    echo "Please fix issues and retry build"
    exit 1
  fi
fi

echo "Installing ... "
time make install
time ldconfig
if [ $? -eq 0 ]; then
  echo "Clang/LLVM v$LLVM_VER installed in: $CMAKE_INSTALL_PREFIX"
else
  echo "There was an issue with the final installation"
  exit 1
fi
